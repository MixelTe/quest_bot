from random import choice
from time import sleep
from typing import Callable

import bafser_tgapi as tgapi

from bot.bot import Bot
from bot.control import forward
from data.user import User
from utils import clear_input, reply_markup

ME = tgapi.MessageEntity
type tfn = Callable[[Bot, User], None]
_story_parts: dict[str, tfn] = {}


def answer_story(bot: Bot):
    assert bot.db_sess
    assert bot.user
    fn = _story_parts.get(bot.user.state)
    if fn:
        fn(bot, bot.user)
    else:
        forward(bot.sendMessage("–í–ï–õ–ò–ö–ê –û–©–ò–ë–ö–ê!"))


def story_part(fn: tfn):
    _story_parts[fn.__name__] = fn
    return fn


@story_part
def started(bot: Bot, user: User):
    state, args = user.get_state()
    if args[0] == 1:
        return
    user.set_state(state, [1])
    for text in [
        "–•–∞–π\\!",
        "–í–æ—Ç –≤–∞–º –º–æ–π *–£–ª—å—Ç–∏–º–∞—Ç—É–º*\\!!!",
        "–Ø –≤–∞—Å –ø—Ä–æ–±–∏–ª –ø–æ –∞–π–ø–∏",
        "–í—ã –º–µ–Ω—è –Ω–µ –ø–æ–∑–≤–∞–ª–∏ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Ç–µ–ø–µ—Ä—å *–ø–æ–∂–∞–ª–µ–µ—Ç–µ* –æ–± —ç—Ç–æ–º\\!",
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ—á–µ–∫ \\-  *250–∫ —Ç–æ–Ω–Ω —Ç—Ä–æ—Ç–∏–ª–∞* üòÇ",
        "–•–æ—Ç–∏—Ç–µ —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ \\- –Ω–∞–π–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–µ–≥–æ —Ç–∞–π–Ω–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∏—Ç 145 —à–∞–ª–∫–µ—Ä–æ–≤ –¢–ù–¢, –∞ –µ—â–µ —É –º–µ–Ω—è –∑–∞–ª–æ–∂–Ω–∏–∫ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è",  # noqa E501
        "–°–ª–µ–¥—É–π—Ç–µ –∑–∞ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –Ω–∞—Ö–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ç—Ä–µ–ø–µ—â–∏—Ç–µ –æ—Ç —Å—Ç—Ä–∞—Ö–∞ ü§™",
    ]:
        bot.sendChatAction("typing")
        st = len(text) * 0.015 - 0.5
        if st > 0:
            sleep(len(text) * 0.015)
        forward(bot.sendMessage(text, use_markdown=True))
    bot.sendChatAction("choose_sticker")
    sleep(1)
    forward(bot.sendSticker("CAACAgEAAxUAAWjZGdMrUNNR5rRbAsVXv_X_xpZ-AAKCAgAC1jEpR2is5WGi39g8NgQ"))
    sleep(10)
    bot.sendChatAction("typing")
    sleep(5)
    bot.sendChatAction("typing")
    sleep(5)
    text = "–†–µ–±—è—Ç–∞, –ø–æ–∫–∞ –ì—Ä–∏—Ñ–µ—Ä –ø–æ—à–µ–ª –Ω–∞–ª–∏–≤–∞—Ç—å —Å–µ–±–µ —á–∞–π —è –ø—Ä–æ–±—Ä–∞–ª—Å—è –∫ –µ–≥–æ –∫–æ–º–ø—É –∏ —É–º–æ–ª—è—é –º–Ω–µ –ø–æ–º–æ—á—å! –Ø –∏ –µ—Å—Ç—å —Ç–æ—Ç —Å–∞–º—ã–π –∑–∞–ª–æ–∂–Ω–∏–∫! –ö—É–¥–∞ –º–µ–Ω—è —Å–ø—Ä—è—Ç–∞–ª–∏, —è –Ω–µ –∑–Ω–∞—é, —Å–ª—ã—à–∞–ª —Ç–æ–ª—å–∫–æ –æ–±—Ä—ã–≤–∫–∏ —Ñ—Ä–∞–∑. –ò–¥–∏—Ç–µ –ø–æ –Ω–∞—à–∏–º —Å–ª–µ–¥–∞–º. –ë—É–¥—É –≤—ã—Å—ã–ª–∞—Ç—å –∏—Ö –ø—Ä–∏–º–µ—Ç—ã. –°–ø–∞—Å–∏—Ç–µ! –ü–æ–º–æ–≥–∏—Ç–µ!"  # noqa E501
    user.set_state("task1")
    forward(bot.sendMessage(text, reply_markup=reply_markup([("–í–ø–µ—Ä—ë–¥!", "start_quest")])))


@story_part
def task1(bot: Bot, user: User):
    task = "–ú—ã –≤ –ª—é–±–∏–º–æ–º –º–µ—Å—Ç–µ –æ–±–∏—Ç–∞–Ω–∏—è —É—Ç–æ–∫. –°–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—á–µ–ª–µ–π —Ç–∞–º."
    answers = ("7", "—Å–µ–º—å", "seven")
    run_task(bot, user, task, answers, "task2")


@story_part
def task2(bot: Bot, user: User):
    task = """
–û–Ω —á—Ç–æ\\-—Ç–æ –ø–æ–¥–±—Ä–æ—Å–∏–ª –≤ –ø—É–Ω–∫—Ç –û–∑–æ–Ω–∞, –∑–∞–º–µ—Ç–∏–ª –∞–¥—Ä–µ—Å: `–í–∏–Ω–Ω–∏—Ü–∫–∞—è, 15`
–ü–∞—Ä–æ–ª—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω:
```
–ê \\- 1
–ô \\- 1
–õ \\- 1
–ú \\- 1
–° \\- 1
```
""".strip()
    answers = ("4", "—á–µ—Ç—ã—Ä–µ", "four")
    run_task(bot, user, task, answers, "task3", use_markdown=True)


@story_part
def task3(bot: Bot, user: User):
    task = "–í–∏–∂—É –ø–∞–º—è—Ç–Ω–∏–∫ –∫–∞–∫–æ–º—É-—Ç–æ —Å–ø–∞—Å–∞—Ç–µ–ª—é, —Ä—è–¥–æ–º –µ–≥–æ –º–∞—à–∏–Ω–∞. –£–∑–Ω–∞–π—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã."
    run_task(bot, user, task,
             lambda ans: ans.replace(" ", "").replace("k", "–∫").replace("m", "–º") == "0101–º–∫–º",
             "task4")


@story_part
def task4(bot: Bot, user: User):
    task = "–ê –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏, –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–≤—Ç—Ä–∞–∫–∞–µ—Ç –°—ã—Ç—ã–π –ª–∏—Å?"
    answers = ("8.00", "8:00", "8 00", "8-00", "08.00", "08:00", "08 00", "08-00",
               "–≤ –≤–æ—Å–µ–º—å —á–∞—Å–æ–≤", "–≤–æ—Å–µ–º—å —á–∞—Å–æ–≤", "–≤ –≤–æ—Å–µ–º—å", "–≤ 8 —á–∞—Å–æ–≤", "8 —á–∞—Å–æ–≤")
    run_task(bot, user, task, answers, "task5")


@story_part
def task5(bot: Bot, user: User):
    task = "–í–∏–∂—É —à–∞—Ä –Ω–∞ –ø–ª–æ—â–∞–¥–∏. –ö–∞–∫–∞—è –∂–µ –Ω–∞ –Ω–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–ª—è –º–µ–Ω—è —Ñ—Ä–∞–∑–∞: ¬´–°–≤–æ–±–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å‚Ä¶¬ª \n–Ø –Ω–µ —É—Å–ø–µ–ª –¥–æ—á–∏—Ç–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞‚Ä¶"
    answers = ("—á–∞—Å—Ç–∏—á–Ω–æ–π", )
    run_task(bot, user, task, answers, "task6")


@story_part
def task6(bot: Bot, user: User):
    task = "–°–∫–æ–ª—å–∫–æ –∫–∞–º–Ω–µ–π –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å, —á—Ç–æ–±—ã –±–æ—Ä—Ü–∞ –∑–∞ —Å–≤–æ–±–æ–¥—É –ª–∏—Ü–µ–∑—Ä–µ—Ç—å?"
    answers = ("6", "—à–µ—Å—Ç—å", "six")
    run_task(bot, user, task, answers, "task7")


@story_part
def task7(bot: Bot, user: User):
    task = "–û–Ω –æ–ø—è—Ç—å –ø–æ—à–µ–ª –ø–∏—Ç—å —á–∞–π –≤–æ ¬´–í–∫—É—Å–Ω–æ, –Ω–æ –Ω–µ —Ç–æ—á–∫—É¬ª, —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ. –ù–∞ –∑–¥–∞–Ω–∏–∏ –∫—É—á–∞ —à–ø–∏–ª–µ–π. –ù–µ —É—Å–ø–µ–ª –ø–æ—Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ?"
    answers = ("20", "–¥–≤–∞–¥—Ü–∞—Ç—å", "twenty")
    run_task(bot, user, task, answers, "task8")


@story_part
def task8(bot: Bot, user: User):
    task = "–û–Ω –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö –ø–æ—Å–ª–µ –¥–æ–∂–¥—è, –∞ –∑–¥–µ—Å—å –≤–∏—Å–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ \\- —è –∑–∞–º–µ—Ç–∏–ª –µ–≥–æ –∞–¥—Ä–µ—Å: `–†–∞–º–µ–Ω–∫–∏, –¥\\.6 –∫\\.2`\\. –°—é–¥–∞ —Ç–æ–∂–µ —á—Ç–æ\\-—Ç–æ –ø–æ–¥–±—Ä–æ—Å–∏–ª\\. –ü–∞—Ä–æ–ª—å –≤—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ\\."  # noqa E501
    answers = ("7", "—Å–µ–º—å", "seven")
    run_task(bot, user, task, answers, "task9", use_markdown=True)


@story_part
def task9(bot: Bot, user: User):
    task = """
–ó–∞—à–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π –¥–æ–º. –í –Ω–µ–º –ø–æ–¥—ä–µ–∑–¥–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —ç—Ç–∞–∂–µ–π! –û–Ω —á—Ç–æ-—Ç–æ –æ–ø—è—Ç—å –ø–æ–¥–±—Ä–æ—Å–∏–ª –≤ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.
–ü–æ–¥—ä–µ–∑–¥ - –ø–µ—Ä–µ–¥ –º–µ—Å—è—Ü–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞
–ù–æ–º–µ—Ä —è—â–∏–∫–∞: –≤–æ–∑—Ä–∞—Å—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –æ–∫—Ç—è–±—Ä–µ –∏ –æ—Ç–Ω—è—Ç—å —Å—É–±–±–æ—Ç—É.
–ö–æ–¥ –∑–Ω–∞–µ—Ç –ü—Ä–∏–Ω—Ü
""".strip()
    answers = ("1", "–æ–¥–∏–Ω", "one")
    run_task(bot, user, task, answers, "task10")


@story_part
def task10(bot: Bot, user: User):
    task = "–¢–µ–ø–µ—Ä—å –æ–Ω –∑–¥–æ—Ä–æ–≤–æ –ø—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è –∏ –∏—â–µ—Ç, –≥–¥–µ –ø–æ–µ—Å—Ç—å. –ù–∞—à–µ–ª –∫–∞–∫–æ–π-—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∏–ø–∞ ¬´—á–∞—è –±–æ–ª—å—à–µ –Ω–µ—Ç¬ª. –ü–æ—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å –∏ —Å–ø–∞—Å–∏—Ç–µ –º–µ–Ω—è –Ω–∞–∫–æ–Ω–µ—Ü! –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ —ç—Ç–æ –º–µ—Å—Ç–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ —Ü–µ–ª–∏–∫–æ–º. "  # noqa E501
    answers = ("471", "—á–µ—Ç—ã—Ä–µ —Å–µ–º—å –æ–¥–∏–Ω", "—á–µ—Ç—ã—Ä–µ—Å—Ç–∞ —Å–µ–º—å–¥–µ—Å—è—Ç—å –æ–¥–∏–Ω")
    run_task(bot, user, task, answers, "quest_end")


@story_part
def quest_end(bot: Bot, user: User):
    state, args = user.get_state()
    if args[0] == 1:
        return
    user.set_state(state, [1])
    msg = "–£—Ä–∞, –º–Ω–µ –ø–æ–≤–µ–∑–ª–æ! –ó–¥–µ—Å—å –¥–æ–±—Ä–∞—è —Ñ–µ—è —Å –ø—Ä–∏–º–µ—Ç–∞–º–∏ –º–∞–º—ã –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞, –∏ –æ–Ω–∞  –∑–∞–º–µ—Ç–∏–ª–∞ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ. –ù–∞–¥–µ—é—Å—å, —á—Ç–æ —Å–∫–æ—Ä–æ –≤—ã –º–µ–Ω—è —Å–ø–∞—Å–µ—Ç–µ! –ú—ã –ø–æ–¥–Ω–∏–º–∞–ª–∏—Å—å –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ, –∫–∞–∂–µ—Ç—Å—è, –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂."  # noqa E501
    forward(bot.sendMessage(msg))
    forward(bot.sendMessage("–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –∑–¥–∞–Ω–∏–µ –∑–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–æ!"))


def run_task(bot: Bot, user: User, task: str, answers: tuple[str, ...] | Callable[[str], bool], next_state: str, *,
             use_markdown: bool = False):
    state, args = user.get_state()
    if args[0] is None:
        user.set_state(state, [1])
        send_backvoice(bot)
        forward(bot.sendMessage(task, use_markdown=use_markdown, reply_markup=reply_markup([("–ü–æ–¥—Å–∫–∞–∑–∫–∞", "task_hint 0")])))
        return
    if not bot.message:
        return
    answer = clear_input(bot.message.text)
    if callable(answers) and answers(answer) or \
            isinstance(answers, tuple) and answer in answers:
        forward(bot.sendMessage("–í–µ—Ä–Ω–æ!"))
        user.set_state(next_state)
        answer_story(bot)
    else:
        send_you_are_wrong(bot)


def send_backvoice(bot: Bot):
    p1 = "–ì–æ–ª–æ—Å —Å–≤—ã—à–µ:\n"
    p2 = "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è —Ä—è–¥–æ–º –∏ —Å–ª—ã—à–∞—Ç —Ç–µ–±—è."
    msg = p1 + p2
    forward(bot.sendMessage(msg, entities=[ME.italic(0, ME.len(p1)), ME.blockquote(ME.len(p1), ME.len(p2))]))


def send_you_are_wrong(bot: Bot):
    forward(bot.sendMessage(choice([
        "–î—É–º–∞—é, —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –µ—â—ë", "–ú–∏–º–æ!", "–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "–ù–µ —É–≥–∞–¥–∞–ª!", "–ù–µ–∞!", "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–≥–∞–¥–∫–∞",
        "–ù–µ–≤–µ—Ä–Ω–æ!", "–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!", "–ù–µ—Ç, –Ω–µ —Ç–æ", "–ù–µ—Ç, –Ω–µ —É–≥–∞–¥–∞–ª", "–ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ",
        "–ù–µ—Ç, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "–ù–µ—Ç-–Ω–µ—Ç-–Ω–µ—Ç", "–ù—É –∂–µ, –ø–æ–¥—É–º–∞–π –ª—É—á—à–µ!", "–ù—É –Ω–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ",
        "–ù—É-–Ω—É, –Ω–µ —Ç–æ", "–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π", "–û—à–∏–±–æ—á–∫–∞!", "–ü–æ–¥—É–º–∞–π –µ—â—ë!", "–ü–æ–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ", "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç",
        "–ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ", "–ü–æ–ø—Ä–æ–±—É–π –ø–æ-–¥—Ä—É–≥–æ–º—É", "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", "–ü—Ä–æ–≤–∞–ª!", "–ü—Ä–æ–º–∞—Ö!", "–£–≤—ã, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "–£–≤—ã, –Ω–µ—Ç!", "–£–≤—ã, –æ—à–∏–±–∫–∞", "–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ—Ç–≤–µ—Ç", "–≠—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ", "–≠—Ç–æ –æ—à–∏–±–∫–∞",
    ])))
