import bafser_tgapi as tgapi
from bafser import Undefined

from bot.bot import Bot
from bot.control import forward
from bot.story import answer_story
from utils import reply_markup

ME = tgapi.MessageEntity


@Bot.add_command()
def start(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    if len(args) < 1 or args[0] != "verySecretStartCode":
        if not bot.user.state:
            bot.user.set_state("banned")
            return f"{bot.user.get_name()}?\n–ù–µ –ø–æ–º–Ω—é —Ç–∞–∫–æ–≥–æ...\n–í –±–∞–Ω —Ç–µ–±—è! ü§™"
        return

    bot.user.set_state("started")
    answer_story(bot)


@Bot.add_command()
def start_quest(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    if bot.user.state != "started":
        return
    bot.user.set_state("task1")
    answer_story(bot)


@Bot.add_command()
def task_hint(bot: Bot, args: tgapi.BotCmdArgs, **_: str):
    hint = ""
    hintI = ""
    match bot.user.state:
        case "task1":
            hint = "–ü–æ—Å—Ä–µ–¥–∏ –ø–æ–ª—è –ª–µ–∂–∏—Ç –∑–µ—Ä–∫–∞–ª–æ: —Å—Ç–µ–∫–ª–æ –≥–æ–ª—É–±–æ–µ, —Ä–∞–º–∞ –∑–µ–ª—ë–Ω–∞—è"
        case "task2":
            hint = "—Å–ª–∞–π–º"
        case "task3":
            if len(args) > 0 and args[0] == "1":
                sendPhoto(bot, "task3_hint.jpg", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ 2")
            else:
                p1 = "–ü–æ–¥—Å–∫–∞–∑–∫–∞ 1:\n"
                p2 = """
–í –±—Ä–µ–∑–µ–Ω—Ç–æ–≤–æ–π –∫—É—Ä—Ç–∫–µ –∏ –∫–∞—Å–∫–µ,
–ó–∞–±—ã–≤ –ø—Ä–æ –∫–æ–ª—å—á—É–∂–Ω—É—é –±—Ä–æ–Ω—å,
–†–µ—à–∏—Ç–µ–ª—å–Ω–æ –∏ –±–µ–∑ –æ–ø–∞—Å–∫–∏
–ë—Ä–æ—Å–∞–µ—Ç—Å—è —Ä—ã—Ü–∞—Ä—å –≤ –æ–≥–æ–Ω—å!
""".strip()
                txt = p1 + p2
                forward(bot.sendMessage(txt, entities=[ME.blockquote(ME.len(p1), ME.len(p2))]))
                edit_hint_btns(bot, 2)
        case "task4":
            sendPhoto(bot, "task4_hint.jpg", "–ü–æ–¥—Å–∫–∞–∑–∫–∞")
        case "task5":
            sendPhoto(bot, "task5_hint.jpg", "–ü–æ–¥—Å–∫–∞–∑–∫–∞")
        case "task6":
            sendPhoto(bot, "task6_hint.jpg", "–ü–æ–¥—Å–∫–∞–∑–∫–∞")
        case "task7":
            sendPhoto(bot, "task7_hint.jpg", "–ü–æ–¥—Å–∫–∞–∑–∫–∞")
        case "task8":
            if len(args) > 0 and args[0] == "1":
                hintI = " 2"
                hint = "–æ–∑–æ–Ω"
            else:
                forward(bot.sendMessage("–ü–æ–¥—Å–∫–∞–∑–∫–∞ 1:\n4 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤—ã"))
                edit_hint_btns(bot, 2)
        case "task9":
            hint = "—Ö–∞! –∞ –Ω–µ—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫–∏)"
        case "task10":
            hint = "—Ö–∞! –∞ –Ω–µ—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫–∏)"

    if hint:
        forward(bot.sendMessage(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞{hintI}:\n" + hint))


def edit_hint_btns(bot: Bot, count: int):
    if bot.callback_query and Undefined.defined(bot.callback_query.message):
        tgapi.editMessageReplyMarkup(bot.callback_query.message.chat.id, bot.callback_query.message.message_id,
                                     reply_markup=reply_markup([
                                         (f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ {i + 1}", f"task_hint {i}") for i in range(count)
                                     ]))


def sendPhoto(bot: Bot, fname: str, caption: str):
    ok, r = bot.sendPhoto(tgapi.url_for("img.img", fname=fname), caption=caption)
    if not ok:
        ok, r = bot.sendPhoto(tgapi.url_for("img.img", fname=fname, _double_slash=False), caption=caption)
    forward((ok, r))
